type Query {
     info: String!
     feed(filter: String, skip: int, first: int, orderBy: LinkOrderByInput): Feed!
}

type Mutation {
     post(url: String!, description: String!): Link!
     signup(email: String!, password: String!, name: String!): AuthPayload
     login(email: String!, password: String!): AuthPayload
     vote(linkId: ID!): vote
}

type Subscription {
     newLink: Link
     newVote: Vote
}

type Link {
     id: ID!
     description: String!
     url: String!
     postedBy: User
}

type AuthPayload {
     token: String
     user: User
}

type User {
     id: ID!
     name: String!
     email: String!
     links: [Link!]!
}

type Vote {
     id: ID!
     link: Link!
     user: User!
}


enum LinkOrderByInput {
     description_ASC
     description_DESC
     url_ASC
     url_DESC
     createdAt_ASC
     createdAT_DESC
}

type Feed {
     links: [Link!]!
     count: int!
}
